org: francyscogna
service: favolapp

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-1
  stage: dev
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'

package:
  exclude:
    - package-lock.json
    - package.json

custom:
  stage: ${opt:stage, self:provider.stage}

appSync: ${file(serverless.appsync-api.yml)}

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table

    #Da impostare bene prima del deploy
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AutoVerifiedAttributes:
          -
        EnabledMfas:
          - SOFTWARE_TOKEN_MFA
        MfaConfiguration: 'ON'
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailMessage: Your verification code is {####}.
          EmailSubject: Verify your email for our service.
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
  Outputs:
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
